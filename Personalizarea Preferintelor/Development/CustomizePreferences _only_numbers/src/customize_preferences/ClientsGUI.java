/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package customize_preferences;


import java.awt.Color;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 * Class that opens Clienti interface. In this interface the user will see the clients preferences in a table, <br>
 * can insert new client preferences, can see details about a specific preference and can inform the Provider Agent <br>
 * about newly inserted client preference. <br>
 * Attributes : <br>
 * - clientsModel : a ClientsTableModel object that will map client record from database and the table. <br>
 * @author Robert
 */
public class ClientsGUI extends javax.swing.JFrame {
    protected ClientsTableModel clientsModel;
    
    /**
     * Constructor that will initialize interface components, instantiate clientsModel attribute, <br>
     * will position the interface on left side of the screen and will refresh the clients table.
     */
    public ClientsGUI() {
        getContentPane().setBackground( new Color(200, 100, 100));
        initComponents();
        clientsModel = new ClientsTableModel();
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice defaultScreen = ge.getDefaultScreenDevice();
        Rectangle r = defaultScreen.getDefaultConfiguration().getBounds();
        int x = (int) r.getMaxX() - this.getWidth();
        int y = (int) r.getMaxY() - this.getHeight();
        this.setLocation(0, y/2);
        refreshClientsTable();
    }
    
    /**
     * Refreshes the clients table.
     */
    public void refreshClientsTable(){
        if( DatabaseManager.instance.isConnected() ) {
            List<Client> clients = new ArrayList<Client>();
            clients = DatabaseManager.instance.getClients();
            clientsModel.setClients(clients);
            clientsModel.fireTableDataChanged();
            clientsTable.setModel(clientsModel);
        }else{
            new JOptionPane().showMessageDialog(this, "Eroare la conexiunea cu baza de date");
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        clientsTable = new javax.swing.JTable();
        stopAddingClientsCheckBox = new javax.swing.JCheckBox();
        addClientButton = new javax.swing.JButton();
        sentToProviderButton = new javax.swing.JButton();
        refreshClientsTableButton = new javax.swing.JButton();
        clientDetailButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Clienti");
        setBackground(new java.awt.Color(102, 204, 255));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        clientsTable.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        clientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Client", "Criteriu 1", "Criteriu 2", "Criteriu 3", "Criteriu 4", "Criteriu 5", "Criteriu 6", "Criteriu 7", "Criteriu 8"
            }
        ));
        clientsTable.setColumnSelectionAllowed(true);
        clientsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(clientsTable);
        clientsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        stopAddingClientsCheckBox.setBackground(new java.awt.Color(200, 100, 100));
        stopAddingClientsCheckBox.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        stopAddingClientsCheckBox.setText("Stop");
        stopAddingClientsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopAddingClientsCheckBoxActionPerformed(evt);
            }
        });

        addClientButton.setBackground(new java.awt.Color(102, 102, 102));
        addClientButton.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        addClientButton.setText("<html>\n<p align=\"center\"> Trimite formular clientului pentru personalizarea preferintelor </p>\n</html>");
        addClientButton.setActionCommand("<html>\n<center> Trimite formular clientului pentru personalizarea preferintelor </center>\n</html>");
        addClientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClientButtonActionPerformed(evt);
            }
        });

        sentToProviderButton.setBackground(new java.awt.Color(102, 102, 102));
        sentToProviderButton.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        sentToProviderButton.setText("<html>\nTrimite catre furnizor\n</html>");
        sentToProviderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sentToProviderButtonActionPerformed(evt);
            }
        });

        refreshClientsTableButton.setBackground(new java.awt.Color(102, 102, 102));
        refreshClientsTableButton.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        refreshClientsTableButton.setText("Actualizeaza");
        refreshClientsTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshClientsTableButtonActionPerformed(evt);
            }
        });

        clientDetailButton.setBackground(new java.awt.Color(102, 102, 102));
        clientDetailButton.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        clientDetailButton.setText("Detaliere preferinte");
        clientDetailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientDetailButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addClientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(sentToProviderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(246, 246, 246)
                        .addComponent(clientDetailButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(538, 538, 538)
                            .addComponent(refreshClientsTableButton)
                            .addGap(18, 18, 18)
                            .addComponent(stopAddingClientsCheckBox))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshClientsTableButton)
                    .addComponent(stopAddingClientsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(addClientButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(clientDetailButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(sentToProviderButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addClientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClientButtonActionPerformed
        // TODO add your handling code here:
        addClientButtonClicked();
    }//GEN-LAST:event_addClientButtonActionPerformed

    /**
     * Will activate Personalizare preferinte Clienti interface and will set the static attribute clientFrame from FrameInstanceHolder class.
     */
    private void addClientButtonClicked(){
        if( FrameInstanceHolder.instance.getAddClientFrame()== null ){
            AddClientGUI addClientFrame = new AddClientGUI();
            FrameInstanceHolder.instance.setAddClientFrame( addClientFrame );
            addClientFrame.setVisible( true );
        }else{
            FrameInstanceHolder.instance.getAddClientFrame().toFront();
        }
    }
    private void refreshClientsTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshClientsTableButtonActionPerformed
        // TODO add your handling code here:
        refreshClientsTable();
        
    }//GEN-LAST:event_refreshClientsTableButtonActionPerformed

    private void stopAddingClientsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopAddingClientsCheckBoxActionPerformed
        // TODO add your handling code here:
        stopAddingClientsCheckBoxPressed();
    }//GEN-LAST:event_stopAddingClientsCheckBoxActionPerformed

    /**
     * Disables the function of adding new client preferences when the check box is pressed. <br>
     */
    private void stopAddingClientsCheckBoxPressed(){
        if( stopAddingClientsCheckBox.isSelected() ){
            new JOptionPane().showMessageDialog(this, "Toti clientii au fost contactati.");
            addClientButton.setEnabled( false );
        }else{
            addClientButton.setEnabled( true );
        }
    }
    
    private void clientDetailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientDetailButtonActionPerformed
        // TODO add your handling code here:
        clientDetailButtonClicked();
    }//GEN-LAST:event_clientDetailButtonActionPerformed
    /**
     * Opens Agent Client XXX interface if the clients table has selection. 
     */
    private void clientDetailButtonClicked(){
        int rowIndex = clientsTable.getSelectedRow();
        // check to see that the frame is active
        if ( FrameInstanceHolder.instance.getDetailClientFrame() != null) {
            // check that the row index is the same as the index of the frame
            // if not reinitialize the components with the new index
            if( rowIndex != FrameInstanceHolder.instance.getDetailClientFrame().getIndex() ){
                Client client = clientsModel.clients.get(rowIndex);
                FrameInstanceHolder.instance.getDetailClientFrame().setClient(client);
                FrameInstanceHolder.instance.getDetailClientFrame().setIndex(rowIndex);
                FrameInstanceHolder.instance.getDetailClientFrame().toFront();
            }else{
                 FrameInstanceHolder.instance.getDetailClientFrame().toFront();
            }
        } else {
            if (rowIndex != -1) {
                // get client record from clientTableModel
                Client client = clientsModel.clients.get(rowIndex);
                DetailClientGUI detailClientGui = new DetailClientGUI(client, rowIndex );
                FrameInstanceHolder.instance.setDetailClientFrame( detailClientGui );
                detailClientGui.setVisible(true);
            } else {
                new JOptionPane().showMessageDialog(this, "Te rog selecteaza preferintele unui client din tabel!");
            }
        }
    }
    
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        FrameInstanceHolder.instance.setClientsFrame(null);
    }//GEN-LAST:event_formWindowClosed

    private void sentToProviderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sentToProviderButtonActionPerformed
        // TODO add your handling code here:
        sentToProviderButtonClicked();
        
    }//GEN-LAST:event_sentToProviderButtonActionPerformed
    /**
     * Shows a message and refreshes the clients table from Agent Furnizor interface.
     */
    private void sentToProviderButtonClicked(){
        JOptionPane pane = new JOptionPane();
        pane.showMessageDialog( this,"Preferinta(ele) a fost trimisa catre Agentul Furnizor" );
        if( FrameInstanceHolder.instance.getProviderFrame() != null ){
            FrameInstanceHolder.instance.getProviderFrame().refreshClientsTable();
            FrameInstanceHolder.instance.getProviderFrame().refreshAllocationTable();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addClientButton;
    private javax.swing.JButton clientDetailButton;
    private javax.swing.JTable clientsTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshClientsTableButton;
    private javax.swing.JButton sentToProviderButton;
    private javax.swing.JCheckBox stopAddingClientsCheckBox;
    // End of variables declaration//GEN-END:variables
}
