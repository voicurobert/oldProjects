/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package customize_preferences;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 * 
 * @author Robert
 */
public class SimpleKMeansGUI extends javax.swing.JFrame {
    
    private CentroidsTableModel centroidModel;
    private SimpleKMeansThread thread;
    
    
    /**
     * Creates new form SimpleKMeansGUI
     */
    public SimpleKMeansGUI(  ) {
        getContentPane().setBackground( new Color(200, 100, 100) );
        initComponents();
        nrOfClustersTextField.setText("");
        centroidModel = new CentroidsTableModel();
        thread = new SimpleKMeansThread();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nrOfClustersTextField = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        nrOfIterationsTextField = new javax.swing.JFormattedTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        centroidsTable = new javax.swing.JTable();
        startButton = new javax.swing.JButton();
        nextStepButton = new javax.swing.JButton();
        autoIterateCheckBox = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        allocationMappingTree = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        clusterMappingTree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Algoritmul Simple K-Means");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        jLabel1.setText("Numar de oferte de creat");

        nrOfClustersTextField.setText(" ");

        jLabel2.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        jLabel2.setText("Numar de iteratii");

        jPanel1.setBackground(new java.awt.Color(200, 100, 100));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Centroizi", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Consolas", 1, 12))); // NOI18N

        centroidsTable.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        centroidsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Valoare 1", "Valoare 2", "Valoare 3", "Valoare 4", "Valoare 5", "Valoare 6", "Valoare 7", "Valoare 8"
            }
        ));
        jScrollPane1.setViewportView(centroidsTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        startButton.setBackground(new java.awt.Color(102, 102, 102));
        startButton.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        nextStepButton.setBackground(new java.awt.Color(102, 102, 102));
        nextStepButton.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        nextStepButton.setText("Pasul urmator");
        nextStepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextStepButtonActionPerformed(evt);
            }
        });

        autoIterateCheckBox.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        autoIterateCheckBox.setText("Itereaza automat");
        autoIterateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoIterateCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Client/Centroid - pas intermediar");
        allocationMappingTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(allocationMappingTree);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Alocare centroid/client");
        clusterMappingTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane3.setViewportView(clusterMappingTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(nrOfClustersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(nrOfIterationsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(autoIterateCheckBox)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(startButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nextStepButton)
                .addGap(119, 119, 119))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nrOfClustersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(nrOfIterationsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(autoIterateCheckBox))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(nextStepButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextStepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextStepButtonActionPerformed
        // TODO add your handling code here:
        thread.resume();
        centroidModel.setCentroids( thread.getCentroids() );
        centroidModel.fireTableDataChanged();
        thread.suspend();
    }//GEN-LAST:event_nextStepButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        if( areValuesSet() ){
            computeCentroids();
            int nrOfClusters = (int)Integer.valueOf( nrOfClustersTextField.getText() );
            int nrOfSteps = (int)Integer.valueOf( nrOfIterationsTextField.getText() );
            thread.setClusterNumber( nrOfClusters  );
            thread.setNrOfSteps( nrOfSteps );
            thread.setClients( DatabaseManager.instance.getClients() );
            if( autoIterateCheckBox.isSelected() ){
                thread.setAutoIterate( true );
            }else{
                thread.setAutoIterate( false );
            }
            thread.start();
            startButton.setEnabled( false );
        }else{
            new JOptionPane().showMessageDialog(this, "!!!");
        }
        
    }//GEN-LAST:event_startButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        FrameInstanceHolder.instance.setSimpleKMeansFrame(null);
    }//GEN-LAST:event_formWindowClosed

    private void autoIterateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoIterateCheckBoxActionPerformed
        // TODO add your handling code here:
        if( autoIterateCheckBox.isSelected() ){
            nextStepButton.setEnabled( false );
        }else{
            nextStepButton.setEnabled( true );
        }
    }//GEN-LAST:event_autoIterateCheckBoxActionPerformed

    private void computeCentroids(){
        List<Centroid> centroids = new ArrayList<Centroid>();
        int nrOfClusters = (int) Integer.valueOf( nrOfClustersTextField.getText() );
        for (int i = 1; i <= nrOfClusters; i++) {
            Centroid centroid = new Centroid();
            centroid.generateRandomData();
            System.out.println(centroid.toString());
            centroids.add(centroid);
           // DatabaseManager.instance.insertCentroid(centroid);
        }
        thread.setCentroids(centroids);
        setTableData(centroids);
    }
    
    private boolean areValuesSet(){
        if( nrOfClustersTextField.getText().isEmpty() || nrOfIterationsTextField.getText().isEmpty() ){
            return false;
        }else{
            return true;
        }
    }
    
    public void setAllocationMappingTree(){
        // get model from tree
        DefaultTreeModel allocationTreeModel = ( DefaultTreeModel ) allocationMappingTree.getModel();
        // get root 
        DefaultMutableTreeNode allocationTreeRoot = ( DefaultMutableTreeNode ) allocationTreeModel.getRoot();
        allocationTreeRoot.removeAllChildren();
        
        for( Integer clientIndex : thread.getAllocationMapping().keySet() ){
            DefaultMutableTreeNode clientNode = new DefaultMutableTreeNode( clientIndex + 1 );
            allocationTreeRoot.add( clientNode );
            HashMap<Double, Integer> info = thread.getAllocationMapping().get( clientIndex );
           
            for( Double result : info.keySet() ){
                Integer centroidIndex = info.get( result );
                String value = result.toString() + " => " + ( centroidIndex + 1 );
                DefaultMutableTreeNode childNode = new DefaultMutableTreeNode( value );
                clientNode.add(childNode);
            }
        }
        allocationTreeModel.reload();
    }
    
    public void setClusterAllocationTree(){
        // get model from tree
        DefaultTreeModel clusterTreeModel = ( DefaultTreeModel ) clusterMappingTree.getModel();
        DefaultMutableTreeNode clusterTreeRoot = ( DefaultMutableTreeNode ) clusterTreeModel.getRoot();
        clusterTreeRoot.removeAllChildren();
        for( Integer centroidIndex : thread.getClusterAllocation().keySet() ){
            DefaultMutableTreeNode centroidNode = new DefaultMutableTreeNode( centroidIndex + 1 );
            List<Client> clients = thread.getClusterAllocation().get( centroidIndex );
            clusterTreeRoot.add( centroidNode );
            DefaultMutableTreeNode clientsListChild = new DefaultMutableTreeNode( getClientsListAsString( clients ) );
            centroidNode.add( clientsListChild );
        }
        clusterTreeModel.reload();
        
    }
    
    
    public void setTableData( List<Centroid> centroids ){
        centroidModel.setCentroids(centroids);
        centroidModel.fireTableDataChanged();
        centroidsTable.setModel(centroidModel);
    }
    
    public void disableNextButton(){
        nextStepButton.setEnabled( false );
    }
    
    
    private String getClientsListAsString( List<Client> clients ){
        String message = "";
        for( int i = 0; i<clients.size(); i++ ){
            Client client = clients.get(i);
            if( (i + 1) == clients.size() ){
                message += client.getIdClient();
            }else{
                message += client.getIdClient() + " , ";
            }
        }
        return message;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree allocationMappingTree;
    private javax.swing.JCheckBox autoIterateCheckBox;
    private javax.swing.JTable centroidsTable;
    private javax.swing.JTree clusterMappingTree;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton nextStepButton;
    private javax.swing.JFormattedTextField nrOfClustersTextField;
    private javax.swing.JFormattedTextField nrOfIterationsTextField;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
}
